@startuml

' Singleton Classes
class Player {
  - instance: Player
  - name: string
  - health: double
  - score: double
  - currency: double
  + getInstance(): Player
}

class LevelManager {
  - instance: LevelManager
  - wavesList: List<Wave>
  - isGameOver: boolean
  - homeBase: Player
  + changeState()
  + walkTowards(Wave)
  + walkTowards(Base)
  + getInstance(): LevelManager
}

Player --> Player : Singleton
LevelManager --> LevelManager : Singleton

' Enemy Factory
interface EnemyFactory {
  + CreateEnemy(): Enemy
}

class WalkingEnemy_Factory {
  + CreateEnemy(): Enemy
}

class FlyingEnemy_Factory {
  + CreateEnemy(): Enemy
}

class TankEnemy_Factory {
  + CreateEnemy(): Enemy
}

class BossFactory {
  + CreateEnemy(): Enemy
}

EnemyFactory <|-- WalkingEnemy_Factory
EnemyFactory <|-- FlyingEnemy_Factory
EnemyFactory <|-- TankEnemy_Factory
EnemyFactory <|-- BossFactory

' Abstract Enemy
abstract class Enemy {
  - state: State
  - health: double
  - type: string
  + clone(): Enemy
  + move()
  + changeState(state)
}

class WalkingEnemy {
  + setupSpeed()
}

class FlyingEnemy {
  + setupSpeed()
}

class TankEnemy {
  + setupSpeed()
}

class BossEnemy {
  + setupSpeed()
}

Enemy <|-- WalkingEnemy
Enemy <|-- FlyingEnemy
Enemy <|-- TankEnemy
Enemy <|-- BossEnemy

EnemyFactory --> Enemy

' Prototype and State
abstract class State {
  + setContext(enemy)
  + applyEffect()
}

class Normal {
  + applyEffect()
}

class Slowed {
  + applyEffect()
}

class Paralyzed {
  + applyEffect()
}

class Dead {
  + applyEffect()
}

class Burned {
  + applyEffect()
}

State <|-- Normal
State <|-- Slowed
State <|-- Paralyzed
State <|-- Dead
State <|-- Burned

Enemy o--> State : has

' Chain of Responsibility: Wave
abstract class Waves {
  - nextWave: Wave
  + setNextWave(Wave)
  + spawnEnemies(positions)
}

class Wave_1 {
  + spawnEnemies()
}

class Wave_2 {
  + spawnEnemies()
}

class Wave_3 {
  + spawnEnemies()
}

class Wave_4 {
  + spawnEnemies()
}

Waves <|-- Wave_1
Waves <|-- Wave_2
Waves <|-- Wave_3
Waves <|-- Wave_4

Wave_1 --> Wave_2 : next
Wave_2 --> Wave_3 : next
Wave_3 --> Wave_4 : next

' Tower Factory
interface TowerFactory {
  + CreateTower(position): Tower
}

class MachineGunFactory {
  + CreateTower(position): Tower
}

class CanonFactory {
  + CreateTower(position): Tower
}

class LaserFactory {
  + CreateTower(position): Tower
}

TowerFactory <|-- MachineGunFactory
TowerFactory <|-- CanonFactory
TowerFactory <|-- LaserFactory

' Towers and Bridge
abstract class Tower {
  - shooter: Shooter
  + attack()
  + setStrategy()
}

class MachineGunTower {
  - attackPerSecond: double
  + attack()
}

class CanonTower {
  - areaOfEffect: double
  + attack()
}

class LaserTower {
  - damageOverTime: double
  + attack()
}

Tower <|-- MachineGunTower
Tower <|-- CanonTower
Tower <|-- LaserTower

' Strategy Pattern
interface Strategy {
  + selectTarget(enemies, towerPosition, range)
}

class HighestHP {
  + selectTarget()
}

class HighestSpeed {
  + selectTarget()
}

class NearestBase {
  + selectTarget()
}

class NearestEnemy {
  + selectTarget()
}

Strategy <|-- HighestHP
Strategy <|-- HighestSpeed
Strategy <|-- NearestBase
Strategy <|-- NearestEnemy

' Tower Decorators
abstract class TowerDecorator {
  - probability: double
  + applyEffect()
}

class LightningEffect {
  + applyEffect()
}

class FireEffect {
  + applyEffect()
}

class IceEffect {
  + applyEffect()
}

TowerDecorator <|-- LightningEffect
TowerDecorator <|-- FireEffect
TowerDecorator <|-- IceEffect

TowerDecorator --> Tower : Decorator

' Template and Object Pool
abstract class Bullet {
  + hitTarget()
  + handleTrajectory()
}

class LaserBullet {
  + hitTarget()
  + handleTrajectory()
}

class MachineGunBullet {
  + hitTarget()
  + handleTrajectory()
}

class CanonBullet {
  + hitTarget()
  + handleTrajectory()
}

Bullet <|-- LaserBullet
Bullet <|-- MachineGunBullet
Bullet <|-- CanonBullet

class BulletPool {
  - instance: BulletPool
  + getBullet(type): Bullet
  + objectPool: Queue<Bullet>
}

BulletPool --> Bullet : manages

' Bridge Pattern
abstract class Shooter {
  + rotateTower()
  + shoot()
  + spawnBullet()
}

class ProjectileShooter {
  + shoot()
}

class LaserShooter {
  + shoot()
  + updateTarget()
}

Shooter <|-- ProjectileShooter
Shooter <|-- LaserShooter

Tower --> Shooter : has

@enduml